import { Observable } from 'rxjs/internal/Observable';
/**
 * Default configuration for the main module.
 * Includes a slice name, a basic reducer, an empty list of metaReducers, and no dependencies.
 */
export const defaultMainModule = {
    slice: "main",
    reducer: (state = {}) => state,
    metaReducers: [],
    dependencies: {}
};
/**
 * Determines the type of a given value.
 *
 * This function attempts to identify the underlying type of a JavaScript value
 * using a combination of checks and built-in functions.
 *
 * @param val - The value to determine the type for.
 * @returns string - A string representing the type of the value (e.g., "undefined", "string", "array", etc.).
 */
function kindOf(val) {
    if (val === undefined)
        return "undefined";
    if (val === null)
        return "null";
    const type = typeof val;
    switch (type) {
        case "boolean":
        case "string":
        case "number":
        case "symbol":
        case "function": {
            return type;
        }
    }
    if (Array.isArray(val))
        return "array";
    if (isDate(val))
        return "date";
    if (isError(val))
        return "error";
    if (isObservable(val))
        return "observable";
    if (isPromise(val))
        return "promise";
    const constructorName = ctorName(val);
    switch (constructorName) {
        case "Symbol":
        case "WeakMap":
        case "WeakSet":
        case "Map":
        case "Set":
            return constructorName;
    }
    return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
}
/**
 * Attempts to get the constructor name of a value.
 *
 * This function checks if the value has a constructor that is a function,
 * and if so, it returns the name of the constructor. Otherwise, it returns null.
 *
 * @param val - The value to get the constructor name for.
 * @returns string - The name of the constructor (if applicable), otherwise null.
 */
function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
}
/**
 * Checks if a value is an Error object.
 *
 * This function uses two criteria to determine if a value is an Error:
 *   - It checks if the value is an instance of the built-in `Error` class.
 *   - It checks if the value has a string property named "message" and a constructor with a number property named "stackTraceLimit".
 *
 * @param val - The value to check if it's an Error.
 * @returns boolean - True if the value is an Error, false otherwise.
 */
function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
/**
 * Checks if a value is a Date object.
 *
 * This function uses two approaches to determine if a value is a Date:
 *   - It checks if the value is an instance of the built-in `Date` class.
 *   - It checks if the value has functions named `toDateString`, `getDate`, and `setDate`.
 *
 * @param val - The value to check if it's a Date.
 * @returns boolean - True if the value is a Date, false otherwise.
 */
function isDate(val) {
    if (val instanceof Date)
        return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
/**
 * Checks if a value is a boxed primitive.
 *
 * This function checks if a value is not `undefined` or `null`, and its value doesn't strictly equal itself when called with `valueOf()`.
 * Primitive values wrapped in their corresponding object representations (e.g., new Number(10)) are considered boxed.
 *
 * @param value - The value to check if it's boxed.
 * @returns boolean - True if the value is a boxed primitive, false otherwise.
 */
function isBoxed(value) {
    return value !== undefined && value !== null && value.valueOf() !== value;
}
/**
 * Checks if a value is a Promise object.
 *
 * This function uses a trick to identify promises. It resolves the value with `Promise.resolve` and compares the resolved value with the original value.
 * If they are the same, it's likely a promise.
 *
 * @param value - The value to check if it's a Promise.
 * @returns boolean - True if the value is a Promise, false otherwise.
 */
function isPromise(value) {
    return Promise.resolve(value) == value;
}
/**
 * Checks if a value is a valid Actionstack action object.
 *
 * This function determines if the provided value is a valid action object
 * used in Actionstack for dispatching state changes.
 *
 * @param action - The value to check if it's a Actionstack action.
 * @returns boolean - True if the value is a plain object with a string property named "type", false otherwise.
 */
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
/**
 * Checks if a function is an async function.
 *
 * This function uses the constructor name to determine if the provided function
 * is an async function introduced in ES2018.
 *
 * @param func - The function to check if it's an async function.
 * @returns boolean - True if the function's constructor name is "AsyncFunction", false otherwise.
 */
function isAsync(func) {
    return func.constructor.name === "AsyncFunction";
}
/**
 * Checks if a value is a plain object.
 *
 * This function determines if the provided value is a plain object (an object
 * that doesn't inherit from other prototypes).
 *
 * @param obj - The value to check if it's a plain object.
 * @returns boolean - True if the value is an object and its prototype is the same as the Object.prototype, false otherwise.
 */
function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
        return false;
    let proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
}
/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */
function isObservable(obj) {
    // The !! is to ensure that this publicly exposed function returns
    // `false` if something like `null` or `0` is passed.
    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
/**
 * Observable that immediately completes without emitting any values
 */
export const EMPTY = new Observable((subscriber) => {
    subscriber.complete();
});
export { isAction, isAsync, isBoxed, isObservable, isPlainObject, isPromise, kindOf };
//# sourceMappingURL=data:application/json;base64,