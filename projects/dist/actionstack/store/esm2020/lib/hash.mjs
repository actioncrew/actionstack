/**
 * Generates a random string of a specified length in base-36 (including digits and lowercase letters).
 *
 * @param {number} length  - The desired length of the random string.
 * @returns {string}       - A random base-36 string of the provided length.
 */
export function salt(length) {
    return Math.random().toString(36).substring(2).padStart(length, "0").slice(0, length);
}
/**
 * Creates a simple 3-character hash of a string using a basic multiplication-based algorithm.
 *
 * @param {string} str - The string to be hashed.
 * @returns {string}   - A 3-character base-36 string representing the hash of the input string.
 */
export function hash(str) {
    let h = 0;
    for (let i = 0; i < str.length; i++) {
        h = 31 * h + str.charCodeAt(i);
    }
    // Convert to base-36 string and pad with zeros
    let hash = h.toString(36).padStart(3, "0");
    // Return the first 3 characters of the hash
    return hash.slice(0, 3);
}
/**
 * Generates a signature by combining a random salt and a 3-character hash of the salt, separated by dots.
 *
 * @returns {string} - A string containing the salt and its hash separated by dots (e.g., "abc.def").
 */
export function signature() {
    let payload = salt(7), hashstr = hash(payload);
    return payload.concat(hashstr).split('').join('.');
}
/**
 * Validates a provided signature string based on its format and internal hash check.
 *
 * @param {string} sign  - The signature string to be validated.
 * @returns {boolean}    - True if the signature is a valid format and the internal hash check passes, false otherwise.
 */
export function isValidSignature(sign) {
    return typeof sign === 'string' && (sign = sign.replace(/\./g, '')).length === 10 && hash(sign.slice(0, 7)) === sign.slice(7, 10);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnJhcmllcy9hY3Rpb25zdGFjay9zdG9yZS9zcmMvbGliL2hhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLE1BQWM7SUFDakMsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLElBQUksQ0FBQyxHQUFXO0lBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEM7SUFDRCwrQ0FBK0M7SUFDL0MsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLDRDQUE0QztJQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFNBQVM7SUFDdkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQVk7SUFDM0MsT0FBTyxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHN0cmluZyBvZiBhIHNwZWNpZmllZCBsZW5ndGggaW4gYmFzZS0zNiAoaW5jbHVkaW5nIGRpZ2l0cyBhbmQgbG93ZXJjYXNlIGxldHRlcnMpLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoICAtIFRoZSBkZXNpcmVkIGxlbmd0aCBvZiB0aGUgcmFuZG9tIHN0cmluZy5cclxuICogQHJldHVybnMge3N0cmluZ30gICAgICAgLSBBIHJhbmRvbSBiYXNlLTM2IHN0cmluZyBvZiB0aGUgcHJvdmlkZWQgbGVuZ3RoLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhbHQobGVuZ3RoOiBudW1iZXIpIHtcclxuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpLnBhZFN0YXJ0KGxlbmd0aCwgXCIwXCIpLnNsaWNlKDAsIGxlbmd0aCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2ltcGxlIDMtY2hhcmFjdGVyIGhhc2ggb2YgYSBzdHJpbmcgdXNpbmcgYSBiYXNpYyBtdWx0aXBsaWNhdGlvbi1iYXNlZCBhbGdvcml0aG0uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGJlIGhhc2hlZC5cclxuICogQHJldHVybnMge3N0cmluZ30gICAtIEEgMy1jaGFyYWN0ZXIgYmFzZS0zNiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBoYXNoIG9mIHRoZSBpbnB1dCBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzaChzdHI6IHN0cmluZykge1xyXG4gIGxldCBoID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgaCA9IDMxICogaCArIHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gIH1cclxuICAvLyBDb252ZXJ0IHRvIGJhc2UtMzYgc3RyaW5nIGFuZCBwYWQgd2l0aCB6ZXJvc1xyXG4gIGxldCBoYXNoID0gaC50b1N0cmluZygzNikucGFkU3RhcnQoMywgXCIwXCIpO1xyXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgMyBjaGFyYWN0ZXJzIG9mIHRoZSBoYXNoXHJcbiAgcmV0dXJuIGhhc2guc2xpY2UoMCwgMyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBzaWduYXR1cmUgYnkgY29tYmluaW5nIGEgcmFuZG9tIHNhbHQgYW5kIGEgMy1jaGFyYWN0ZXIgaGFzaCBvZiB0aGUgc2FsdCwgc2VwYXJhdGVkIGJ5IGRvdHMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2FsdCBhbmQgaXRzIGhhc2ggc2VwYXJhdGVkIGJ5IGRvdHMgKGUuZy4sIFwiYWJjLmRlZlwiKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaWduYXR1cmUoKSB7XHJcbiAgbGV0IHBheWxvYWQgPSBzYWx0KDcpLCBoYXNoc3RyID0gaGFzaChwYXlsb2FkKTtcclxuICByZXR1cm4gcGF5bG9hZC5jb25jYXQoaGFzaHN0cikuc3BsaXQoJycpLmpvaW4oJy4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBhIHByb3ZpZGVkIHNpZ25hdHVyZSBzdHJpbmcgYmFzZWQgb24gaXRzIGZvcm1hdCBhbmQgaW50ZXJuYWwgaGFzaCBjaGVjay5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHNpZ24gIC0gVGhlIHNpZ25hdHVyZSBzdHJpbmcgdG8gYmUgdmFsaWRhdGVkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgLSBUcnVlIGlmIHRoZSBzaWduYXR1cmUgaXMgYSB2YWxpZCBmb3JtYXQgYW5kIHRoZSBpbnRlcm5hbCBoYXNoIGNoZWNrIHBhc3NlcywgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTaWduYXR1cmUoc2lnbjogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBzaWduID09PSAnc3RyaW5nJyAmJiAoc2lnbiA9IHNpZ24ucmVwbGFjZSgvXFwuL2csICcnKSkubGVuZ3RoID09PSAxMCAmJiBoYXNoKHNpZ24uc2xpY2UoMCwgNykpID09PSBzaWduLnNsaWNlKDcsIDEwKTtcclxufVxyXG4iXX0=