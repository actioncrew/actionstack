import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
/**
 * Creates a new functional Tracker for managing the execution status of Observables.
 *
 * @returns {Tracker} - A Tracker instance.
 */
export const createTracker = () => {
    const entries = new Map();
    const timeout = 30000;
    /**
     * Gets the execution status of a tracked Observable.
     */
    const getStatus = (entry) => entries.get(entry)?.value === true;
    /**
     * Sets the execution status of a tracked Observable.
     */
    const setStatus = (entry, value) => entries.get(entry)?.next(value);
    /**
     * Marks a tracked Observable as completed.
     */
    const setCompletion = (entry) => entries.get(entry)?.complete();
    /**
     * Tracks a new Observable.
     */
    const track = (observable) => {
        if (!entries.has(observable)) {
            const subject = new BehaviorSubject(false);
            entries.set(observable, subject);
        }
    };
    /**
     * Removes a tracked Observable and unsubscribes its BehaviorSubject.
     */
    const remove = (observable) => {
        const subject = entries.get(observable);
        if (subject) {
            entries.delete(observable);
            subject.complete();
        }
    };
    /**
     * Resets the execution status of all tracked Observables to `false`.
     */
    const reset = () => {
        for (const [key, value] of [...entries.entries()]) {
            if (value.closed) {
                entries.delete(key);
            }
            else {
                value.next(false);
            }
        }
    };
    /**
     * Asynchronously checks if all tracked Observables have completed within a timeout period.
     */
    const allExecuted = () => new Promise((resolve, reject) => {
        if ([...entries.values()].length === 0) {
            resolve();
            return;
        }
        const timeoutId = setTimeout(() => reject('Timeout reached'), timeout);
        let numPending = [...entries.values()].length;
        const handleCompletion = () => {
            numPending--;
            if (numPending === 0) {
                clearTimeout(timeoutId);
                resolve();
            }
        };
        const handleError = (error) => {
            clearTimeout(timeoutId);
            reject(error);
        };
        [...entries.values()].forEach((subject) => {
            subject.subscribe({
                next: handleCompletion,
                error: handleError,
                complete: handleCompletion,
            });
        });
    });
    return {
        timeout,
        getStatus,
        setStatus,
        complete: setCompletion,
        track,
        remove,
        reset,
        allExecuted,
    };
};
//# sourceMappingURL=data:application/json;base64,